<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description></description>
		<link>http://collectivecognition.com</link>
		<atom:link href="http://collectivecognition.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Vr City</title>
				<description>&lt;a href='/images/blog/original/vrcity-wip-2013-7-31.jpg' rel='shadowbox'&gt;&lt;img src='/images/blog/thumbnails/vrcity-wip-2013-7-31.jpg' /&gt;&lt;/a&gt;&lt;p&gt;Some very early work on a procedurally generated city for the Oculus Rift.&lt;/p&gt;</description>
				<pubDate>Wed, 31 Jul 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/VR-City</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/VR-City</guid>
			</item>
		
			<item>
				<title>Rss Feed And New Portfolio Page</title>
				<description>&lt;p&gt;I&amp;#8217;ve made a few small updates to the site today, including the addition of an &lt;a href='/feed'&gt;RSS feed&lt;/a&gt; and a new page to house my &lt;a href='/web'&gt;web portfolio&lt;/a&gt;. There are only a few projects listed for now, but I&amp;#8217;ll be updating it constantly as I bring projects over to the new infrastructure I&amp;#8217;m in the process of building.&lt;/p&gt;</description>
				<pubDate>Tue, 16 Jul 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/rss-feed-and-new-portfolio-page</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/rss-feed-and-new-portfolio-page</guid>
			</item>
		
			<item>
				<title>Computational Complexity For Dummies</title>
				<description>&lt;p&gt;Dionysis &amp;#8220;dionyziz&amp;#8221; Zindros has written a &lt;a href='http://discrete.gr/complexity/'&gt;great post on discrete.gr&lt;/a&gt; tackling the topic of algorithm complexity analysis for those of us who come from a non-CS background.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s very well written and provides a great overview of the concepts involved.&lt;/p&gt;</description>
				<pubDate>Fri, 12 Jul 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/computational-complexity-for-dummies</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/computational-complexity-for-dummies</guid>
			</item>
		
			<item>
				<title>Keeping Ghpages In Sync With Master</title>
				<description>&lt;p&gt;For simple, static web projects, you may simply want to keep your gh-pages branch in sync with the master branch.&lt;/p&gt;

&lt;p&gt;It turns out this is exceedingly simple to do, adding only a few commands to your workflow.&lt;/p&gt;

&lt;p&gt;First, while your master branch is checked out, make sure all of your changes are committed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -a -m &amp;quot;Some changes&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if you haven&amp;#8217;t already, create the gh-pages branch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b gh-pages&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;#8217;ve already got a branch set up, just switch to it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout gh-pages&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The git &lt;code&gt;rebase&lt;/code&gt; command lets you copy the contents of one branch to another:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase master&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, push out the changes in both branches:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push --all&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure to switch back to the master branch when you&amp;#8217;re done:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/pre&gt;</description>
				<pubDate>Tue, 09 Jul 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/keeping-ghpages-in-sync-with-master</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/keeping-ghpages-in-sync-with-master</guid>
			</item>
		
			<item>
				<title>Obfuscating Sequential Ids With Skip32</title>
				<description>&lt;p&gt;Generally, ID generation schemes fall into one of two camps: sequential and random.&lt;/p&gt;

&lt;p&gt;Sequential provide obvious ease of implementation, where a random scheme will provide non-guessable IDs and a more complicated implementation due to the need to protect against collisions.&lt;/p&gt;

&lt;p&gt;One alternative that can give some of the best of both worlds is to use a hybrid approach where you generate sequential IDs, but encrypt them for display to the end-user using a non-trivial one-way encryption algorithm such as &lt;a href='https://npmjs.org/package/skip32'&gt;skip32&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A sample implementation using node.js is below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var skip32 = new require(&amp;quot;skip32&amp;quot;).Skip32;
skip32 = new skip32([0x9b, 0x21, 0x96, 0xe, 0x1a, 0xcf, 0x24, 0x5f, 0x14, 0x93]);

var id = 0;
var generateID = function(){
	id++;
	return(skip32.encrypt(id).toString(16));
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Calling &lt;code&gt;generateID&lt;/code&gt; repeatedly will result in a series of obfuscated sequential IDs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;console.log(generateID());
# 3d4a6194
console.log(generateID());
# 23e8cd4b&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the array passed to the skip32 constructor is a key in the form of a byte array and can be up to 10 bytes in length. You&amp;#8217;ll want to change this for your own purposes and store it securely like any key.&lt;/p&gt;</description>
				<pubDate>Sat, 01 Jun 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/obfuscating-sequential-ids-with-skip32</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/obfuscating-sequential-ids-with-skip32</guid>
			</item>
		
			<item>
				<title>Socket.io And Node.js Clustering</title>
				<description>&lt;p&gt;I ran into a problem while working on chat.js, in the form of alot of log-spam from socket.io that looked something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;info  - handshake authorized DL6P-B6mDjt1hrhM3VYw
debug - setting request GET /socket.io/1/websocket/DL6P-B6mDjt1hrhM3VYw
debug - set heartbeat interval for client DL6P-B6mDjt1hrhM3VYw
debug - websocket writing 7:::1+0
warn  - client not handshaken client should reconnect
info  - transport end (error)
debug - set close timeout for client DL6P-B6mDjt1hrhM3VYw
debug - cleared close timeout for client DL6P-B6mDjt1hrhM3VYw
debug - cleared heartbeat interval for client DL6P-B6mDjt1hrhM3VYw
debug - discarding transport&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem turned out to be due to my use of the (still experimental) &lt;code&gt;cluster&lt;/code&gt; API causing a race condition in socket.io and causing erratic behaviour in my application.&lt;/p&gt;

&lt;p&gt;Luckily, multiple-cpu support isn&amp;#8217;t a huge requirement for me at this time. Just a heads up for anyone else having similar problems.&lt;/p&gt;</description>
				<pubDate>Wed, 29 May 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/socket.io-and-node.js-clustering</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/socket.io-and-node.js-clustering</guid>
			</item>
		
			<item>
				<title>Bare Minimum Javascript Tests</title>
				<description>&lt;p&gt;I had a need to write some quick and dirty tests for a javascript library I was working on and whipped up a minimal (one line) assertion function which fills all of my testing requirements on simple projects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var assert = function(test, description){ console.log(&amp;quot;[&amp;quot; + (test ? &amp;quot;PASS&amp;quot; : &amp;quot;FAIL&amp;quot;) + &amp;quot;] &amp;quot; + description); };&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assertions can be made like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;assert(true !== false, &amp;quot;True is not false&amp;quot;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will result in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[TRUE] True is not false&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Throw the assert function and your tests together into &lt;code&gt;someTests.js&lt;/code&gt; and execute them: &lt;code&gt;node someTests&lt;/code&gt;.&lt;/p&gt;</description>
				<pubDate>Tue, 28 May 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/bare-minimum-javascript-tests</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/bare-minimum-javascript-tests</guid>
			</item>
		
			<item>
				<title>Colour.js</title>
				<description>&lt;p&gt;I&amp;#8217;ve checked in the first version of colour.js to &lt;a href='http://github.com/collectivecognition/colour.js'&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s a javascript library (actually just a single class) for converting and playing with colour values. It lets you do things like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var colour = new Colour(el.style.backgroundColor);
el.style.backgroundColor = colour.l(colour.l() - 0.1);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which will lighten the background colour of the element by 10%.&lt;/p&gt;

&lt;p&gt;The library handles parsing, manipulating and outputting colours in hex, rgb, rgba, hsl and hsla currently, with planned support for w3c colour names in the future.&lt;/p&gt;</description>
				<pubDate>Sun, 26 May 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/colour.js</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/colour.js</guid>
			</item>
		
			<item>
				<title>Shadowbox Inlined</title>
				<description>&lt;p&gt;I whipped up a quick version of the &lt;a href='http://shadowbox-js.com'&gt;Shadowbox&lt;/a&gt; lightbox script which has all images and css injected inline into the javascript code, allowing for that single script to include all assets required.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href='https://github.com/collectivecognition/shadowbox-inlined'&gt;Github project&lt;/a&gt;.&lt;/p&gt;</description>
				<pubDate>Fri, 03 May 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/shadowbox-inlined</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/shadowbox-inlined</guid>
			</item>
		
			<item>
				<title>Solus</title>
				<description>&lt;a href='/images/blog/original/solus-wip-2013-5-1.jpg' rel='shadowbox'&gt;&lt;img src='/images/blog/thumbnails/solus-wip-2013-5-1.jpg' /&gt;&lt;/a&gt;
&lt;p&gt;First screenshot of a game project I&amp;#8217;m working on called Solus. One day, it will grow up to be a procedurally generated space trading / combat / exploration simulator. Right now, it&amp;#8217;s some boxes that click together into a vaguely ship-looking shape.&lt;/p&gt;</description>
				<pubDate>Wed, 01 May 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/solus</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/solus</guid>
			</item>
		
	</channel>
</rss>