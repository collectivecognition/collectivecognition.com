<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description></description>
		<link>http://collectivecognition.com</link>
		<atom:link href="http://collectivecognition.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Procedural Generation Jam 2014</title>
				<description>&lt;h2 id=&quot;friday-800pm&quot;&gt;Friday, 8:00PM&lt;/h2&gt;

&lt;p&gt;Today is the kick off of the annual Procedural Generation Jam.&lt;/p&gt;

&lt;p&gt;As I’ve been playing a lot of both Civilization: Beyond Earth and Anno 2084 lately, I think I’m going to tackle a turn based strategy game. It should mesh nicely with the theme, be mechanically simple enough to implement rapidly and lend itself to a simple graphical style. I’ve got a rough idea of the game sketched out and am going to get started tonight with some graphics engine grunt work.&lt;/p&gt;

&lt;h2 id=&quot;pm&quot;&gt;10:36PM&lt;/h2&gt;

&lt;p&gt;My initial thought was a sphere composed of hexoganal tiles, but it turns out that this is mathematically impossible. Damn you reality! After messing with everything from electromagnetic repulsion simulations to hypercube rejection I finally settled on using the lowly icosphere as the basic for my game world.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/procedural-jam-2014-1.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/procedural-jam-2014-1.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-1&quot;&gt;11:41PM&lt;/h2&gt;

&lt;p&gt;Sleep time! I spend an hour or so playing with the perlin noise capabilities in Unity to try to generate some simple terrain. This first attempt involved converting the cartesian coordinates of my vertices to polar coordinates and then using those to see the perlin noise generator, but as you can see from this animation there are a number of warping / wrapping issues I need to resolve.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fat.gfycat.com/HarmfulImaginaryHamster.gif&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;saturday-910am&quot;&gt;Saturday, 9:10AM&lt;/h2&gt;

&lt;p&gt;I found an implemented a simplex noise generator which is giving me much more natural looking results. I think I’ll leave this aspect for now and start working on some actual gameplay.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fat.gfycat.com/AdeptSpiffyCondor.gif&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 07 Nov 2014 00:00:00 -0500</pubDate>
				<link>http://collectivecognition.com/blog/procedural-generation-jam-2014</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/procedural-generation-jam-2014</guid>
			</item>
		
			<item>
				<title>Ludum Dare 30 Devlog</title>
				<description>&lt;h2 id=&quot;pm-waiting&quot;&gt;8:30PM: Waiting…&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Blog post started. Check.&lt;/li&gt;
  &lt;li&gt;Latest version of Unity installed. Check.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now to wait for the theme to be announced!&lt;/p&gt;

&lt;h2 id=&quot;am-beginnings&quot;&gt;8:00AM: Beginnings&lt;/h2&gt;

&lt;p&gt;I brainstormed until about 11 last night and landed on a few vague ideas, but decided it would be better to get a fresh start in the morning.&lt;/p&gt;

&lt;p&gt;After having a nice sleep I’ve decided on a nautical theme, with the player sailing between islands / continents. Think the Old World and the New World, connecting them with seafaring trade routes.&lt;/p&gt;

&lt;p&gt;I’m going to try to keep the look of the game as simple as possible so I can concentrate on the core gameplay, physics, etc.. Behold, the very first screenshot! Doesn’t look like much, but I’ve got some basic buoyancy physics going which I think look pretty decent in action.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-30-1.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-30-1.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;am-quick-update&quot;&gt;9:00AM: Quick Update&lt;/h2&gt;

&lt;p&gt;Just a quick update to show some progress in the graphical style. I’ve pretty much decided on a wind movement mechanic which I’m going to start on as soon as I get back from doing some grocery shopping.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-30-2.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-30-2.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;am-wind&quot;&gt;11:30AM: Wind!&lt;/h2&gt;

&lt;p&gt;I’ve made a bit of progress on a wind system and added some basic manual controls.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-30-3.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-30-3.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-slow-progress&quot;&gt;3:30PM: Slow Progress&lt;/h2&gt;

&lt;p&gt;The game is progressing slowly but I’m definitely making progress. I’ve got some basic world generation to generate random islands, a simple ship model with simulated cloth sails and have made a bunch of tweaks to the controls and the physics.&lt;/p&gt;

&lt;p&gt;Next up will be adding some user interface stuff so I can start to flesh out some actual gameplay.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-30-4.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-30-4.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-ui-work&quot;&gt;5:00PM: UI Work&lt;/h2&gt;

&lt;p&gt;I’ve updated to Unity 4.6 to get access to the new UI system, which burned a bit of time. On the up side, it’s MUCH easier to get up and running than the old system so I think I’ll make up the lost time with increased efficiency.&lt;/p&gt;

&lt;p&gt;I designed added an event dialog which will enable a lot of the gameplay features I’m planning to be added rapidly.&lt;/p&gt;

&lt;p&gt;Time for a short dinner / excercise break!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-30-5.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-30-5.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-flags&quot;&gt;10:00PM: Flags!&lt;/h2&gt;

&lt;p&gt;The most obvious thing I’ve added in the last 3 or so hours since dinner is the flags which pop up when you encounter an island for the first time. These will serve to help you keep track of which islands you’ve already been to in order to encourage exploration.&lt;/p&gt;

&lt;p&gt;When colliding with a new island, the flag will pop up (accompanied by an animation and a particle effect) and a random event will occur.&lt;/p&gt;

&lt;p&gt;I spent an inordinate amount of time playing with cloth physics for the flags but I think it looks cool enough to be worthwhile AND I had an excuse to learn a Unity system I wasn’t really familiar with before.&lt;/p&gt;

&lt;p&gt;I did lots and lots of refactoring and tweaking throughout the game as well, so I think things will progress quickly for the remainder of the evening.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-30-6.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-30-6.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-sleep&quot;&gt;1:30PM: Sleep&lt;/h2&gt;

&lt;p&gt;I’ve completed a bunch of stuff, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Revamped the water texture, physics and animation&lt;/li&gt;
  &lt;li&gt;Adjusted the lighting&lt;/li&gt;
  &lt;li&gt;Ironed out a bunch of kinks with the flags&lt;/li&gt;
  &lt;li&gt;Added particle effects for the ship wake&lt;/li&gt;
  &lt;li&gt;Revamped the ship controls&lt;/li&gt;
  &lt;li&gt;Completed a basic implementation of the random event system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Time to get some sleep and hit this fresh in the morning!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-30-7.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-30-7.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;am-quick-update-1&quot;&gt;9:30AM: Quick Update&lt;/h2&gt;

&lt;p&gt;I’ve been up ‘n at it for a couple hours now. I’ve modelled the “home” island, where the game starts and done a lot of the event / story writing. &lt;/p&gt;

&lt;p&gt;I’m going to keep this short so I can get back to work!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-30-8.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-30-8.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;am-more-writing--some-ui&quot;&gt;11:30AM: More Writing &amp;amp; Some UI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-30-9.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-30-9.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-final-build-submitted&quot;&gt;8:30PM: Final Build Submitted&lt;/h2&gt;

&lt;p&gt;8+ hours of crunch time later and the game is as finished as it’s going to be.&lt;/p&gt;

&lt;p&gt;I’ve very happy with the result and most of what I had in my design made it in to the game (with the exception of sound). &lt;/p&gt;

&lt;p&gt;Try it for yourself &lt;a href=&quot;http://collectivecognition.github.io/Curmudgeon/&quot;&gt;here&lt;/a&gt; or check out the &lt;a href=&quot;http://collectivecognition.github.io/Curmudgeon/&quot;&gt;source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-30-10.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-30-10.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-30-11.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-30-11.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-30-12.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-30-12.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tools-used&quot;&gt;Tools Used&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://silo3d.com&quot;&gt;Silo&lt;/a&gt; for polygon modelling&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.photoshop.com/&quot;&gt;Photoshop&lt;/a&gt; for textures / UI graphics&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://neotextureedit.sourceforge.net/&quot;&gt;NeoTextureEdit&lt;/a&gt; for the water texture&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://unity3d.com&quot;&gt;Unity&lt;/a&gt; for everything else&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Fri, 22 Aug 2014 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/ludum-dare-30-devlog</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/ludum-dare-30-devlog</guid>
			</item>
		
			<item>
				<title>Ludum Dare 29 Devlog</title>
				<description>&lt;h2 id=&quot;pm-initial-ideas&quot;&gt;9:05PM: Initial Ideas&lt;/h2&gt;

&lt;p&gt;The theme is Beneath The Surface. My initial thoughts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Asteroid mining (something like Dig Dug or Mr Driller?)&lt;/li&gt;
  &lt;li&gt;Ocean exploration (fishing?)&lt;/li&gt;
  &lt;li&gt;Oil drilling (a puzzle game maybe?)&lt;/li&gt;
  &lt;li&gt;Peeling vegetables (could be a good use of touch controls!)&lt;/li&gt;
  &lt;li&gt;Exploring the human psyche (psychologist simulator?)&lt;/li&gt;
  &lt;li&gt;Crypt / tombs / catacombs (filling up with water maybe?)&lt;/li&gt;
  &lt;li&gt;Mine carts (procedurally generated tunnels?)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pm-choosing-an-idea&quot;&gt;9:22PM: Choosing An Idea&lt;/h2&gt;

&lt;p&gt;There were a lot of space-type themes in the final list so I was already thinking along these lines before the final theme was chosen.&lt;/p&gt;

&lt;p&gt;I think I have to go with asteroid mining. I’m imagining something like a combination of Lunar Lander and the classic Asteroids. Unity should be able to handle most of the physics “heavy lifting” and as long as I stick to a simple graphical style, I think I might be able to pull this off.&lt;/p&gt;

&lt;p&gt;Some initial thoughts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I want this to work on mobile devices, so touch-friendly controls are a must. &lt;/li&gt;
  &lt;li&gt;I’d like travel between asteroids to be zoomed out, with the camera zooming in for landing&lt;/li&gt;
  &lt;li&gt;Parallax stars would be cool for the background&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Time to start coding!&lt;/p&gt;

&lt;h2 id=&quot;pm-basic-physics--controls&quot;&gt;10:22PM: Basic Physics / Controls&lt;/h2&gt;

&lt;p&gt;I’ve got a placeholder ship sprite and a basic newtonian physics control setup which allows attitude adjustment (rotation) forward / reverse thrust and velocity clamping to keep things sane.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using UnityEngine;
using System.Collections;

public class ShipControls : MonoBehaviour {
	private float rotatationSpeed = 100.0f;
	private float acceleration = 2.0f;
	private float thrust = 0.0f;
	private float maxVelocity = 2.0f;

	void Update(){
		transform.Rotate (Vector3.forward * (-Input.GetAxis(&quot;Horizontal&quot;) * rotatationSpeed * Time.deltaTime) ); 

		float inputThrust = Input.GetAxis(&quot;Vertical&quot;);
		thrust += inputThrust * acceleration;

		Vector3 newForce = Vector3.up * thrust * Time.deltaTime;
		Vector3 relativeForce = transform.InverseTransformDirection(newForce);
		rigidbody2D.AddForce(new Vector2(relativeForce.x * -1f, relativeForce.y));

		rigidbody2D.velocity = Vector3.ClampMagnitude(rigidbody2D.velocity, maxVelocity);

		Debug.DrawLine (transform.position, transform.position + Vector3.up * 2f, Color.red);
	}

	void OnGUI(){
		GUI.Label(new Rect(10, 10, 100, 25), &quot;Thrust: &quot; + thrust);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-29-1.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-29-1.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-wrestling-with-blog&quot;&gt;10:40PM: Wrestling With Blog&lt;/h2&gt;

&lt;p&gt;Grr! My blog publishing scripts are giving me trouble. Mental note: sort this sort of thing out BEFORE the compo next time.&lt;/p&gt;

&lt;h2 id=&quot;pm-so-very-tired&quot;&gt;11:05PM: So Very Tired&lt;/h2&gt;

&lt;p&gt;I’ve done some more “miner” tweaking, but as it’s been a very long day and I’m having trouble keeping my eyes open, I think I’ll get some sleep and hit the ground running in the morning.&lt;/p&gt;

&lt;p&gt;A few notes on my current thoughts for the direction of the game:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Randomly place asteroids around level&lt;/li&gt;
  &lt;li&gt;Place “ore” nuggets randomly within asteroids&lt;/li&gt;
  &lt;li&gt;Ship must fly by and scan for these ore nuggest&lt;/li&gt;
  &lt;li&gt;After locating an ore nugget, player must land on asteroid surface perpendicular to nugget and drill straight down to retrieve it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;am-wakey-wakey&quot;&gt;6:58AM: Wakey Wakey&lt;/h2&gt;

&lt;p&gt;My significant other had a brilliant idea in her dreams: Beaneath the Surfers, a game about surfers avoiding being eaten by sharks. If only LD was twice as long!&lt;/p&gt;

&lt;p&gt;Back to work :D&lt;/p&gt;

&lt;h2 id=&quot;am-camera&quot;&gt;8:07AM: Camera&lt;/h2&gt;

&lt;p&gt;I’ve made a bit of progress with an auto-zooming camera that makes sure you can always see at least one asteroid. It’s glitchy, but basically functional so I’m going to shift gears and work on some scanning code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Asteroid : MonoBehaviour {
	public bool IsVisible(){
		Vector3 viewPos = Camera.main.WorldToViewportPoint(transform.position);

		if(viewPos.x &amp;lt; 0 || viewPos.x &amp;gt; 1 || viewPos.y &amp;lt; 0 || viewPos.y &amp;gt; 1){
			return false;
		}

		return true;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;am-scanner&quot;&gt;9:20AM: Scanner&lt;/h2&gt;

&lt;p&gt;I have a basic scanner system in place. Scanner is triggered by holding down the mouse button and then aimed with the mouse. Ore that is “scanned” will become visible.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-29-2.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-29-2.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;am-level-generation&quot;&gt;10:40AM: Level Generation&lt;/h2&gt;

&lt;p&gt;Lots of tweaks / additions in the last hour.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Implemented a basic level generator that places asteroids and adds ore to them.&lt;/li&gt;
  &lt;li&gt;Re-wrote camera zooming system to simply toggle between zoom levels based on the distance the closest asteroid. This works MUCH better than the more elaborate system.&lt;/li&gt;
  &lt;li&gt;Tweaked ship controls to make the physics more manageable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next task will be adding support for landing on asteroids (and destroying the ship if you come in too fast / upside down /etc..), which is probably going to be one of the trickiest bits of code in the game.&lt;/p&gt;

&lt;p&gt;All in all, things are progressing nicely and I have decent confidence I’ll be able to finish SOMETHING to submit tomorrow.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-29-3.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-29-3.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;am-lunch-break&quot;&gt;11:32AM: Lunch Break!&lt;/h2&gt;

&lt;p&gt;I got a little distracted and added animated thrusters to indicate the direction / intensity of thrust and also tweaked the physics a bit.&lt;/p&gt;

&lt;p&gt;Most of the core mechanics are in place, except “mining” the ore and collisions, so I think this is a good stopping point to take a break and go grab some lunch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-29-4.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-29-4.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-lots-of-updates&quot;&gt;2:24PM: Lots of Updates&lt;/h2&gt;

&lt;p&gt;Had a nice long lunch (Korean pork bone soup) and then got a ton of work done!&lt;/p&gt;

&lt;p&gt;Highlights are a bunch of graphics updates, including parallax backgrounds and new asteroids.&lt;/p&gt;

&lt;p&gt;I also re-wrote the ore distribution code to place the ore realistically beneath the uneven surface of the asteroids by picking. Quick code sample to illustrate the technique:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Asteroid : MonoBehaviour {
	public GameObject orePrefab;

	private float minDepth = 0.1f;
	private float maxDepth = 0.5f;
	private int minOre = 2;
	private int maxOre = 20;

	// Initialize a new asteroid

	public void Start(){

		// Generate a random number of ore, within the specified range

		int numOre = Random.Range(minOre, maxOre);

		for(int ii = 0; ii &amp;lt; numOre; ii++){

			// Instantiate a new ore object and parent it to the asteroid

			GameObject ore = (GameObject)Instantiate(orePrefab);
			ore.transform.parent = gameObject.transform;

			// Pick a random point along the outside of the asteroid collider

			PolygonCollider2D p = (PolygonCollider2D)collider2D;
			Vector2 randomPoint = p.points[Random.Range (0, p.points.Length)];

			// Move it to a random depth in the specified range

			float randomDepth = Random.Range(minDepth, maxDepth);
			randomPoint = Vector2.Lerp(randomPoint, Vector2.zero, randomDepth);

			// Set position of ore, making sure to place it&#39;s z in front of the asteroid

			Vector3 randomPos = new Vector3(randomPoint.x, randomPoint.y, -0.0001f);
			ore.transform.localPosition = randomPos;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-29-5.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-29-5.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-slow-going&quot;&gt;4:19PM: Slow Going&lt;/h2&gt;

&lt;p&gt;Physics are turning into a pain in the butt (as per usual), so I’ve wasted a good amount of time tweaking those and I’ms till not 100% happy with the controls.&lt;/p&gt;

&lt;p&gt;I did manage to throw in a nice explosion animation when the ship collides with an asteroid and a system for breaking the ship up into it’s component parts and applying random forces to them so they drift / spin away during the explosion. It looks pretty cool!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-29-6.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-29-6.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-more-tweaking&quot;&gt;5:04PM: More Tweaking&lt;/h2&gt;

&lt;p&gt;I’ve finally got the physics and controls in a place I’m happy with, and a solid idea of where I want the rest of the gameplay to go.&lt;/p&gt;

&lt;p&gt;I’m going to replace the scanning beam with more of a “pulse” which gets sent out in all directions at intervals. The scanning beam will be repurposed as a sort of mining tractor beam and become the mechanism by which the player retrives ore.&lt;/p&gt;

&lt;p&gt;Time to think about some dinner, do a few errands around the house and finish plotting my next steps.&lt;/p&gt;

&lt;h2 id=&quot;pm-scanning&quot;&gt;7:06PM: Scanning&lt;/h2&gt;

&lt;p&gt;I’ve revamped the scanning system and played with a lot of the graphics and small subsystems. Things are going slowly but surely. I think I’ll be able to have all the core gameplay finished before I go to bed, leaving all day tomorrow for polishing, playtesting, sound effects and finishing touches like menus, etc..&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-29-7.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-29-7.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-version-control&quot;&gt;8:30PM: Version Control&lt;/h2&gt;

&lt;p&gt;Remember, friends don’t let friends develop without using version control! Set up a git repo for the project so I can start tracking changes after a small scare with some changes causing a nasty crash.&lt;/p&gt;

&lt;p&gt;The mining beam is coming along nicely, should have a working prototype soon.&lt;/p&gt;

&lt;h2 id=&quot;pm-mining-beam&quot;&gt;9:37PM: Mining Beam&lt;/h2&gt;

&lt;p&gt;My first stab at the mining beam is complete, as well as some basic score-keeping. The game now officially meets the definition a game, being that it has a beginning, a middle and an end.&lt;/p&gt;

&lt;p&gt;I think I’m in good shape to get this thing into decent shape for submission by the deadline tomorrow., so I’ll probably slow down a bit for the rest of the evening, but I’ll likely chip away at a few small things before bed.&lt;/p&gt;

&lt;h2 id=&quot;am-late-start&quot;&gt;10:06AM: Late Start&lt;/h2&gt;

&lt;p&gt;Had a little bit of a sleep in and then had to do some grocery shopping, so I’m starting later than I wanted to. Fortunately, I have a pretty good idea of how to tackle the last few features so hopefully things will progress quickly today.&lt;/p&gt;

&lt;p&gt;Also, Sarah helped me come up with a name for the game: Ursa Miner.&lt;/p&gt;

&lt;h2 id=&quot;am-mini-map&quot;&gt;10:51AM: Mini Map&lt;/h2&gt;

&lt;p&gt;I’m working through my wish list of extra features now. First up: a mini map. This was pretty easy to pull off using a second camera, although there were some difficulties with converting between real and normalized screen coordinates, rendering order of GUI elements vs game objects, etc.. I think it looks really slick for such a small amount of work!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-29-8.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-29-8.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-ui-work&quot;&gt;12:01PM: UI Work&lt;/h2&gt;

&lt;p&gt;I’ve implemented a main menu of sorts, including a logo and some basic instrctuions. The letters of the logo slowly drift around, to add some continuity with the ship death animation and a bit of extra personality.&lt;/p&gt;

&lt;p&gt;There’s also now a message when you die prompting the player to press a key to restart, and the ability to restart the game.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-29-9.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-29-9.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-level-generation&quot;&gt;1:00PM: Level Generation&lt;/h2&gt;

&lt;p&gt;I’ve polished up the level generation code to generate a nice circular asteroid belt, as well as adding a few new asteroid types and tweaking the algorithm that distributes ore inside the asteroids.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-29-10.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-29-10.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-scores&quot;&gt;2:24PM: Scores&lt;/h2&gt;

&lt;p&gt;Added score GUI and hi score tracking. I also redrew the ore sprites and added a few colors for variety. Lots of other small tweaks / bug fixes as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-29-11.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-29-11.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-final-touches&quot;&gt;5:04PM: Final Touches&lt;/h2&gt;

&lt;p&gt;Fixed the last bugs on my list, including fixing a number of issues with collision masks and refactoring the code that drags the ore into the ship, which was profoundly broken.&lt;/p&gt;

&lt;p&gt;I also added a bunch little things that add to general polish, like flickering flames for the ship thrusters, smoke trails and a small delay before the player can reload the level so that the explosion animation can play.&lt;/p&gt;

&lt;p&gt;All that’s left now is to add some sound effects and submit!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/original/ludum-dare-29-12.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/ludum-dare-29-12.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pm-sound-effects&quot;&gt;7:25PM: Sound Effects&lt;/h2&gt;

&lt;p&gt;After a few tries at generating some sound effects, I settled on a nice minimal retro feel. I think the game is as done as it’s going to get, so I’m going to do a final build and submit. Only 1.5 hours to spare!&lt;/p&gt;

&lt;h2 id=&quot;pm-done&quot;&gt;7:58PM: DONE!&lt;/h2&gt;

&lt;p&gt;Ursa Miner has been submitted!&lt;/p&gt;

&lt;p&gt;You can head over to &lt;a href=&quot;http://www.ludumdare.com/compo/ludum-dare-29/?action=preview&amp;amp;uid=11551&quot;&gt;the Ludum Dare entry&lt;/a&gt; to vote, to &lt;a href=&quot;https://github.com/collectivecognition/UrsaMiner&quot;&gt;Github&lt;/a&gt;  to view the source or &lt;a href=&quot;http://collectivecognition.github.io/UrsaMiner/&quot;&gt;play it online here&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Fri, 25 Apr 2014 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/ludum-dare-29-devlog</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/ludum-dare-29-devlog</guid>
			</item>
		
			<item>
				<title>Awesome Screenshots In Awesomewm</title>
				<description>&lt;p&gt;I’ve been experimenting with setting up an &lt;a href=&quot;https://www.archlinux.org&quot;&gt;arch linux&lt;/a&gt; work environment on my laptop this weekend and one of the things I found myself missing almost immediately from OSX was the handy-dandy built in screenshot functionality.&lt;/p&gt;

&lt;p&gt;In the spirit of open source, I whipped up a quick lua key-binding for &lt;a href=&quot;http://awesome.naquadah.org/&quot;&gt;awesome window manager&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just place the following in an apppropriate place in your &lt;code&gt;~/.config/rc.lua&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;awful.key({ modkey, }, &quot;p&quot;, function () awful.util.spawn_with_shell(&quot;FILENAME=/tmp/
$(date +%m-%d-%y-%H-%M-%S).png; import -window root \&quot;$FILENAME\&quot;; gimp \&quot;$FILENAME\&quot;&quot;) end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll need &lt;a href=&quot;http://www.imagemagick.org/&quot;&gt;imagemagick&lt;/a&gt; to take the actual screenshot and &lt;a href=&quot;http://www.gimp.org/&quot;&gt;gimp&lt;/a&gt; to view / edit it.&lt;/p&gt;

&lt;p&gt;Install them like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo pacman -S imagemagick gimp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can restart &lt;code&gt;awesome&lt;/code&gt; by pressing &lt;code&gt;mod4-shift-r&lt;/code&gt;, by default.&lt;/p&gt;

&lt;p&gt;Now just press &lt;code&gt;mod4-p&lt;/code&gt; and a screenshot of your current view will auto-magically be opened in gimp.&lt;/p&gt;
</description>
				<pubDate>Fri, 18 Apr 2014 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/awesome-screenshots-in-awesomewm</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/awesome-screenshots-in-awesomewm</guid>
			</item>
		
			<item>
				<title>Mock Http Backends In Angular</title>
				<description>&lt;p&gt;A quick introduction to implementing mock-HTTP backends in angular.js, a great technique that can help development in the absense of a backend, offline development, end-to-end testing and more.&lt;/p&gt;

&lt;p&gt;Include both &lt;code&gt;angular&lt;/code&gt; and the &lt;code&gt;angular-mocks&lt;/code&gt; library:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;js/lib/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;js/lib/angular-mocks.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bootstrap your application and conditionally inject &lt;code&gt;angular-mocks&lt;/code&gt; into your application module. I like to configure things this way to allow easily switching between live and mock backends when developing, testing, etc..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG = {
    useMocks: true
};

var yourApp = angular.module(&quot;YourApp&quot;, [CONFIG.useMocks ? &quot;ngMockE2E&quot; :function(){ }]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let’s intercept some HTTP requests! &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yourApp.run([&quot;$httpBackend&quot;, function($httpBackend){
    if(CONFIG.useMocks){

        // Respond to requests to `/foo` with `{&quot;foo&quot;: &quot;bar&quot;}`:

        $httpBackend.whenGET(/^\/foo$/).respond(function(method, uri, body){
                return [200, {
                    foo: bar
                }];
            });

        // Respond to requests to `/foo/BAR` with `{&quot;foo&quot;: &quot;BAR&quot;}`:
        // Also throw an exception if the passed value is too short

        $httpBackend.whenGET(/^\/foo\/\w+$/).respond(function(method, uri, body){
            body = JSON.parse(body);
            
            if(body.foo.length &amp;gt; 2){
                return [200, {
                    foo: body.foo
                }];
            }

            return [500, &quot;There was an error!&quot;];
        });
    }
}]);
&lt;/code&gt;&lt;/pre&gt;
</description>
				<pubDate>Tue, 04 Feb 2014 00:00:00 -0500</pubDate>
				<link>http://collectivecognition.com/blog/mock-http-backends-in-angular</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/mock-http-backends-in-angular</guid>
			</item>
		
			<item>
				<title>Cancelling Outstanding Http Requests In Angular</title>
				<description>&lt;p&gt;While working on an angular.js project recently I ran into issues with long running http requests initiated by controllers that had since been destroyed causing subsequent requests to be delayed until they completed. To further complicate things, each browser support a different number of concurrent http requests, so behavior can is often erratic.&lt;/p&gt;

&lt;p&gt;In a traditional web application, these requests would be destroyed by the browser when navigating to a new page, but in a single page web application no such cleanup happens and we’re left to handle things on our own.&lt;/p&gt;

&lt;p&gt;Luckily a recent build of angular added support for cancelling of outstanding $http requests via the &lt;code&gt;timeout&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;Here’s a quick example implementation that demonstrates cancelling multiple outstanding $http requests when the controller is destroyed (such as when navigating to a new view):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular.module(&quot;App&quot;).
    controller(&quot;SomeCtrl&quot;, [&quot;$scope&quot;, $http&quot;, $q&quot;, function($scope, $http, $q){
        // Initiate a long running http request
        $http.get(&quot;http://example.com/endpoint&quot;, {
            timeout: $scope.canceler.promise
        });

        // And another one
        $http.get(&quot;http://example.com/another_endpoint&quot;, {
            timeout: $scope.canceler.promise
        });

        // Wait for the controller to be destroyed
        $scope.$on(&quot;$destroy&quot;, function(){
            // Cancel all outstanding $http requests
            // Multiple requests can share the same timeout promise
            $scope.canceler.resolve();
        });
    }]);
&lt;/code&gt;&lt;/pre&gt;
</description>
				<pubDate>Mon, 13 Jan 2014 00:00:00 -0500</pubDate>
				<link>http://collectivecognition.com/blog/cancelling-outstanding-http-requests-in-angular</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/cancelling-outstanding-http-requests-in-angular</guid>
			</item>
		
			<item>
				<title>Vr City</title>
				<description>&lt;p&gt;&lt;a href=&quot;/images/blog/original/vrcity-wip-2013-7-31.jpg&quot; rel=&quot;shadowbox&quot;&gt;&lt;img src=&quot;/images/blog/thumbnails/vrcity-wip-2013-7-31.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some very early work on a procedurally generated city for the Oculus Rift.&lt;/p&gt;
</description>
				<pubDate>Wed, 31 Jul 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/VR-City</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/VR-City</guid>
			</item>
		
			<item>
				<title>Rss Feed And New Portfolio Page</title>
				<description>&lt;p&gt;I’ve made a few small updates to the site today, including the addition of an &lt;a href=&quot;/feed&quot;&gt;RSS feed&lt;/a&gt; and a new page to house my &lt;a href=&quot;/web&quot;&gt;web portfolio&lt;/a&gt;. There are only a few projects listed for now, but I’ll be updating it constantly as I bring projects over to the new infrastructure I’m in the process of building.&lt;/p&gt;
</description>
				<pubDate>Tue, 16 Jul 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/rss-feed-and-new-portfolio-page</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/rss-feed-and-new-portfolio-page</guid>
			</item>
		
			<item>
				<title>Computational Complexity For Dummies</title>
				<description>&lt;p&gt;Dionysis “dionyziz” Zindros has written a &lt;a href=&quot;http://discrete.gr/complexity/&quot;&gt;great post on discrete.gr&lt;/a&gt; tackling the topic of algorithm complexity analysis for those of us who come from a non-CS background.&lt;/p&gt;

&lt;p&gt;It’s very well written and provides a great overview of the concepts involved.&lt;/p&gt;
</description>
				<pubDate>Fri, 12 Jul 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/computational-complexity-for-dummies</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/computational-complexity-for-dummies</guid>
			</item>
		
			<item>
				<title>Keeping Ghpages In Sync With Master</title>
				<description>&lt;p&gt;For simple, static web projects, you may simply want to keep your gh-pages branch in sync with the master branch.&lt;/p&gt;

&lt;p&gt;It turns out this is exceedingly simple to do, adding only a few commands to your workflow.&lt;/p&gt;

&lt;p&gt;First, while your master branch is checked out, make sure all of your changes are committed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -a -m &quot;Some changes&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if you haven’t already, create the gh-pages branch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’ve already got a branch set up, just switch to it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The git &lt;code&gt;rebase&lt;/code&gt; command lets you copy the contents of one branch to another:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, push out the changes in both branches:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure to switch back to the master branch when you’re done:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
&lt;/code&gt;&lt;/pre&gt;
</description>
				<pubDate>Tue, 09 Jul 2013 00:00:00 -0400</pubDate>
				<link>http://collectivecognition.com/blog/keeping-ghpages-in-sync-with-master</link>
				<guid isPermaLink="true">http://collectivecognition.com/blog/keeping-ghpages-in-sync-with-master</guid>
			</item>
		
	</channel>
</rss>